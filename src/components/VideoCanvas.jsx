import React, { useRef } from "react";
import { useState, useEffect } from "react";
import { useTrafficCounter } from "../hooks/useTrafficCounter";
import { useVehicleCountFromFirebase } from "../hooks/useVehicleCountFromFirebase";
import { useDailyVehicleCounts } from "../hooks/useDailyVehicleCounts";
import { exportToExcel } from "../utils/exportToCSV";
import styles from "./VideoCanvas.module.css";

export default function VideoCanvas() {
	const canvasRef = useRef(null);
	const imgRef = useRef(null);
	const [imageStatus, setImageStatus] = useState("loading");
	const [imageError, setImageError] = useState(null);
	
	const carsCount = useVehicleCountFromFirebase();
	const history = useDailyVehicleCounts();

	const { count: detectedCount, isModelLoaded, error: modelError } = useTrafficCounter(canvasRef, imgRef, {
		topIgnoreY: 150,
		maxDist: 60,
		maxLost: 3,
		frameMs: 2000
	});

	useEffect(() => {
		const img = imgRef.current;
		if (!img) return;

		const handleLoad = () => {
			console.log("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ –µ –∑–∞—Ä–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
			setImageStatus("loaded");
			setImageError(null);
		};

		const handleError = (e) => {
			console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ—Ç–æ:", e);
			setImageStatus("error");
			setImageError("–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–µ —Å –∫–∞–º–µ—Ä–∞—Ç–∞");
		};

		img.addEventListener('load', handleLoad);
		img.addEventListener('error', handleError);

		return () => {
			img.removeEventListener('load', handleLoad);
			img.removeEventListener('error', handleError);
		};
	}, []);

	return (
		<div className={styles.container}>
			<header className={styles.header}>
				<h1 className={styles.title}>üöó –°–∏—Å—Ç–µ–º–∞ –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ —Ç—Ä–∞—Ñ–∏–∫–∞</h1>
				<p className={styles.subtitle}>–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–Ω–æ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –∏ –æ—Ç—á–∏—Ç–∞–Ω–µ –Ω–∞ –ú–ü–° –≤ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ</p>
			</header>

			<div className={styles.mainContent}>
				<div className={styles.statsCard}>
					<div className={styles.statItem}>
						<div className={styles.statNumber}>{carsCount}</div>
						<div className={styles.statLabel}>–û–±—â–æ –∑–∞—Å–µ—á–µ–Ω–∏ –ú–ü–° –¥–Ω–µ—Å</div>
					</div>
					<div className={styles.statItem}>
						<div className={styles.statNumber}>{detectedCount || 0}</div>
						<div className={styles.statLabel}>–ó–∞—Å–µ—á–µ–Ω–∏ –≤ –º–æ–º–µ–Ω—Ç–∞</div>
					</div>
					<div className={styles.statusIndicator}>
						<div className={`${styles.statusDot} ${
							isModelLoaded && imageStatus === "loaded" ? styles.active : styles.inactive
						}`}></div>
						<span className={styles.statusText}>
							{isModelLoaded && imageStatus === "loaded" 
								? "–°–∏—Å—Ç–µ–º–∞—Ç–∞ –µ –∞–∫—Ç–∏–≤–Ω–∞" 
								: "–ó–∞—Ä–µ–∂–¥–∞–Ω–µ..."}
						</span>
					</div>
				</div>

				{(modelError || imageError) && (
					<div className={styles.errorCard}>
						<h3>‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–∞—Ç–∞</h3>
						{modelError && <p>AI –º–æ–¥–µ–ª: {modelError}</p>}
						{imageError && <p>–ö–∞–º–µ—Ä–∞: {imageError}</p>}
					</div>
				)}

				<div className={styles.videoSection}>
					<h2 className={styles.sectionTitle}>üìπ –í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –æ—Ç –∫–∞–º–µ—Ä–∞—Ç–∞</h2>
					<div className={styles.videoContainer}>
						<img
							ref={imgRef}
							src="https://camera-proxy-server-211m.onrender.com/cam"
							crossOrigin="anonymous"
							alt="stream"
							style={{ display: "none" }}
							onLoad={() => console.log("Image loaded")}
							onError={(e) => console.error("Image error:", e)}
						/>
						<canvas
							ref={canvasRef}
							width={640}
							height={480}
							className={styles.videoCanvas}
						/>
						<div className={styles.videoOverlay}>
							<div className={styles.recordingIndicator}>
								<div className={`${styles.recordingDot} ${
									imageStatus === "loaded" ? styles.recording : styles.paused
								}`}></div>
								{imageStatus === "loaded" ? "REC" : "PAUSE"}
							</div>
						</div>
						<div className={styles.debugInfo}>
							<div>–ú–æ–¥–µ–ª: {isModelLoaded ? "‚úì" : "‚è≥"}</div>
							<div>–ö–∞–º–µ—Ä–∞: {imageStatus === "loaded" ? "‚úì" : imageStatus === "error" ? "‚úó" : "‚è≥"}</div>
							<div>–ó–∞—Å–µ—á–µ–Ω–∏: {detectedCount || 0}</div>
						</div>
					</div>
				</div>

				<div className={styles.actionsSection}>
					<button
						onClick={() => exportToExcel(history)}
						className={styles.exportButton}
					>
						<span className={styles.buttonIcon}>üìä</span>
						–ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
						<span className={styles.buttonSubtext}>(.xlsx —Ñ–æ—Ä–º–∞—Ç)</span>
					</button>
				</div>

				<div className={styles.historySection}>
					<h2 className={styles.sectionTitle}>üìà –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –¥–∞–Ω–Ω–∏</h2>
					<div className={styles.tableContainer}>
						<table className={styles.historyTable}>
							<thead>
								<tr>
									<th>–î–∞—Ç–∞</th>
									<th>–ë—Ä–æ–π –ú–ü–°</th>
									<th>–°—Ç–∞—Ç—É—Å</th>
								</tr>
							</thead>
							<tbody>
								{history.map(entry => (
									<tr key={entry.date}>
										<td>
											<div className={styles.dateCell}>
												<span className={styles.dateText}>{entry.date}</span>
											</div>
										</td>
										<td>
											<div className={styles.countCell}>
												<span className={styles.countNumber}>{entry.count}</span>
											</div>
										</td>
										<td>
											<div className={styles.statusCell}>
												<span className={styles.statusBadge}>
													{entry.count > 0 ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
												</span>
											</div>
										</td>
									</tr>
								))}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	);
}